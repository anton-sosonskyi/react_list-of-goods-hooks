{"version":3,"sources":["App.tsx","GoodsList.tsx","index.tsx"],"names":["SortType","GoodsList","goods","map","good","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","updatedGoods","visibleGoods","sort","g1","g2","localeCompare","length","reverse","getReorderedGoods","className","type","cn","ALPHABET","onClick","LENGTH","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0ECfQC,EAA6B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC3C,OACE,6BACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,oBAAe,UAAQ,OAAvB,SACGA,GADMA,SDFJC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGL,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAmCE,IAAMM,EAAgB,WAC3B,MAAgCC,mBAASP,EAASQ,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EA5BD,SACLX,EADK,GAGJ,IADCO,EACF,EADEA,SAAUE,EACZ,EADYA,WAENG,EAAY,YAAOZ,GAiBzB,OAfAY,EAAaC,MAAK,SAACC,EAAIC,GACrB,OAAQR,GACN,KAAK,EACH,OAAOO,EAAGE,cAAcD,GAE1B,KAAK,EACH,OAAOD,EAAGG,OAASF,EAAGE,OAM1B,OAAO,KAGFR,EAAaG,EAAaM,UAAYN,EAOxBO,CACnBhB,EACA,CAAEI,WAAUE,eAGd,OACE,sBAAKW,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYf,IAAaT,EAASyB,WAEtCC,QAAS,kBAAMhB,EAAYV,EAASyB,WANtC,iCAWA,wBACEF,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYf,IAAaT,EAAS2B,SAEtCD,QAAS,kBAAMhB,EAAYV,EAAS2B,SANtC,4BAWA,wBACEJ,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAab,IAEjBe,QAAS,kBAAMd,GAAeD,IANhC,sBAWEF,IAAaT,EAASQ,MAAQG,IAC9B,wBACEY,KAAK,SACLD,UAAU,4BACVI,QAAS,WACPd,GAAc,GACdF,EAAYV,EAASQ,OALzB,sBAYJ,cAAC,EAAD,CAAWN,MAAOW,QE7GxBe,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6b64261a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { GoodsList } from './GoodsList';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((g1, g2): number => {\n    switch (sortType) {\n      case 1:\n        return g1.localeCompare(g2);\n\n      case 2:\n        return g1.length - g2.length;\n\n      default:\n        break;\n    }\n\n    return 0;\n  });\n\n  return isReversed ? visibleGoods.reverse() : visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const updatedGoods = getReorderedGoods(\n    goodsFromServer,\n    { sortType, isReversed },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={() => setSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-info',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.NONE || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setIsReversed(false);\n              setSortType(SortType.NONE);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n      <GoodsList goods={updatedGoods} />\n    </div>\n  );\n};\n","type Props = {\n  goods: string[];\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => {\n  return (\n    <ul>\n      {goods.map(good => (\n        <li key={good} data-cy=\"Good\">\n          {good}\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}